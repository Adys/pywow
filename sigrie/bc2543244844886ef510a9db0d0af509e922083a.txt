#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import wdbc
os.environ['DJANGO_SETTINGS_MODULE'] = "sigrie.settings"
from xml.dom import minidom
from sigrie.owdb.models import *
from optparse import OptionParser

o = OptionParser()
o.add_option("-b", "--build", type="int", dest="build")
o.add_option("-l", "--locale", type="string", dest="locale", default="enUS")
o.add_option("-v", "--version", type="int", dest="version", default=0)

args = o.parse_args(sys.argv[3:])[0]


def _getNode(tag, dom, type=str):
	try:
		return type(dom.getElementsByTagName(tag)[0].firstChild.data)
	except IndexError:
		return type()

class ArmoryLoot(object):
	
	def __repr__(self):
		return "<Loot: %i from %i>" % (self.item_id, self.creature_id)
	
	def addInfo(self, dom, item):
		self.item_id = item
		self.name = str(dom.getAttribute("name"))
		print item, self.name
		
		#cost = dom.getElementsByTagName("cost")
		#if cost:
			#cost = cost[0]
			#self.sell_price = int(cost.getAttribute("sellPrice") or 0)
			#buy = cost.getAttribute("buyPrice")
			#self.buy_price = buy and int(buy) or 0
		
		#disenchant = dom.getElementsByTagName("disenchantLoot")
		#self.disenchant = disenchant and int(disenchant[0].getAttribute("requiredSkillRank")) or -1
	
	def assignTo(self, f):
		kwargs = self.__dict__
		kwargs["_id"] = self._id
		f[self._id] = kwargs


def main():
	try:
		OUT = sys.argv[2]
	except IndexError:
		print "Usage: %s /path/to/dump armory-itemcache.wdb" % (sys.argv[0])
		exit()
	
	ls = os.listdir(sys.argv[1])
	ls.sort()
	d = {}
	i = 0
	
	for f in ls:
		i += 1
		try:
			id = int(f.split("i=")[1])
		except IndexError:
			continue
		
		txt = minidom.parse("%s/%s" % (sys.argv[1], f))
		
		print "Reading %s - %i / %i" % (f, i, len(ls))
		
		if f.startswith("item-info"):
			elements = txt.getElementsByTagName("creature")
			if elements:
				if id not in d:
					d[id] = ArmoryLoot()
				for k in elements:
					d[id].addInfo(k, id)
	

if __name__ == "__main__":
	main()
